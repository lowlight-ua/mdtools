"""A very simple model of a markdown file tree."""


from typing import List, Dict
from pathlib import Path
from mdtools.model.anchor import Anchor
from mdtools.model.link import Link
from mdtools.model.file import File


class Tree:
    """Contains data about a markdown file tree."""

    # Base path of the markdown tree.
    base:        Path

    # All files in the file tree.
    files:       Dict[Path, File]

    # All file names in the file tree
    # (where file name is "hello.md" in "C:/Documents/hello.md").
    # Maps from file name to all Files that have this name.
    # Used for auto fixing.
    names:       Dict[str,  List[Path]]

    # All anchors in the file tree.
    # Maps from file name to all Files that have this anchor.
    # Used for auto fixing.
    anchors:     Dict[str,  List[Path]]

    # All anchors autogenerated from headings in the file tree.
    # Maps from file name to all Files that have this anchor.
    # Used for auto fixing.
    h_anchors:   Dict[str,  List[Path]]

    # All anchors combined
    all_anchors: Dict[str,  List[Path]]

    def __init__(self, base: str) -> None:
        self.base = Path(base).resolve()
        self.files = {}
        self.names = {}
        self.anchors = {}
        self.h_anchors = {}
        self.all_anchors = {}

    def on_file(self, path: Path) -> File:
        """Called for each file when traversing a file tree."""
        file = File(path)
        self.files[path] = file
        self.names.setdefault(path.name, []).append(path)
        return file

    def on_anchor(self, path: Path, anchor: Anchor) -> None:
        """Called during file parsing if an anchor is found."""
        self.files[path].on_anchor(anchor)
        self.anchors.setdefault(anchor.name, []).append(path)

    def on_heading_anchor(self, path: Path, anchor: Anchor) -> None:
        """Called during file parsing if a heading is found."""
        self.files[path].on_heading_anchor(anchor)
        self.h_anchors.setdefault(anchor.name, []).append(path)

    def on_link(self, path: Path, link: Link) -> None:
        """Called during file parsing if a link is found."""
        self.files[path].on_link(link)
